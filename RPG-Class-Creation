# File: RPG-Class-Creation
# Author: Cameron Cox
# UT EID: cpc2526
# Course: cs303E


# Description of program: 
# Creates a Character class that allows the user to build an object with a name, health value, and creates a 
# function to reduce the health of the object. Establishes Hero and Enemy subclasses of the Character class, an 
# Enemy class also has a damage parameter that is used in reducing the health of other objects. Hero objects 
# have a private inventory that you can add to, remove from, or access using functions. Heros can recover 
# health using the restore_health function



# Used to create parent 'Character' objects that our program interacts with using functions established in classes.
class Character:

    def __init__(self, name, health):
        """
        Initializes the health and name variables for each individual character object as they are created.

        :name: String. name of the character object.
        :health: int. the health of the character object.
        :return: no return.
        """  
        self.name = name
        self.health = health

    def __str__(self):
        """
        Prints a formatted string.

        :return: String. f-string formatted to display the 'Character' object's name and health attributes. 
        """ 
        return(f'{self.name} (health={self.health})')

    def take_damage(self, damage):
        """
        Reduces a character's health by the amount of damage passed into this function.

        :damage: int. the amount of damage dealt.
        :return: int. the health after the damage has been dealt.
        """ 
        self.health -= damage
        return(self.health)

# Subclass of 'Character' class; has a few more functions to interact with an inventory and heal.
class Hero(Character):

    def __init__(self, name, health):
        """
        Initializes the health and name variables from parent class 'Character' and creates an inventory.

        :name: String. the name of our Hero.
        :health: int. the health of our Hero.
        :return: no return
        """
        Character.__init__(self, name, health)
        self.__inventory = [] # creates the inventory as a private list so we can't add items willy nilly. 

    def restore_health(self, healing):
        """
        Heals the Hero object by the specified healing amount.

        :healing: int. amount of health to be healed.
        :return: int. the health after it has been increased by the 'healing' amount.
        """
        self.health +=  healing
        return(self.health)
    
    def add_inventory(self, item):
        """
        Adds an item to the Hero object's inventory.

        :item: String. the name of the item being added to our inventory list.
        :return: no return
        """
        self.__inventory.append(item)

    def remove_inventory(self, item):
        """
        Removes an item from the Hero object's inventory.

        :item: String. the name of the item being removed from our inventory list.
        :return: no return
        """
        self.__inventory.remove(item)

    def get_inventory(self):
        """
        Returns our inventory list.

        :return: list. Collection of each item (String) that has been added and hasn't been removed. 
        """
        return(self.__inventory)
    
# Subclass of 'Caracter' class; uses a damage parameter to interact with other 'Character' objects
class Enemy(Character):

    def __init__(self, name, health, damage):
        """
        Initializes the health and name variables from parent class 'Character' and initializes damage parameter.

        :name: String. the name of our Enemy.
        :health: int. the health of our Enemy.
        :damage: int. the damage our Enemy is able to inflict.
        :return: no return
        """
        Character.__init__(self, name, health)
        self.damage = damage



"""
Driver Code
"""
def main():

    # Create our Hero object and two Enemy objects.
    han = Hero("Han", 40)
    zombie = Enemy("Zombie", 20, 15)
    werewolf = Enemy("Werewolf", 15, 10)
    
    # Prints starting information. The print statment calls on the parent class Caracter's __str__ function
    print("Start:")
    print(han)
    print(zombie)
    print(werewolf)

    # resolve battle 1. To deal damage, the object dealing damage calls the take_damage function on the other object.
    werewolf.take_damage(10)
    han.take_damage(werewolf.damage) # Use Enemy.damage to allow flexibility in battles

    # Print Battle 1 information
    print("Battle 1:")
    print(han)
    print(werewolf)

    # resolve and print Battle 2.
    zombie.take_damage(20)
    han.take_damage(zombie.damage)
    print("Battle 2:")
    print(han)
    print(zombie)

    # Add an elixer item to the han object inventory list, use the item, remove it, print updated information. 
    han.add_inventory("5 Health Elixer")
    han.restore_health(5)
    han.remove_inventory("5 Health Elixer")
    print("Restore Health:")
    print(han)

    # Add a few items to the han object's inventory then print it. 
    han.add_inventory("gold coin")
    han.add_inventory("candle")
    print("Inventory:")
    print(han.get_inventory())

if __name__ == "__main__":
    main()
